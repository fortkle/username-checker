---
description: 
globs: 
alwaysApply: false
---
# 開発ワークフロー

このドキュメントでは、本プロジェクトにおける開発の進め方やルールについて説明します。

## 開発の進め方 (ブランチ作成からPRまで)

開発は以下のステップで進めます。

1.  **ブランチ作成**
    *   担当する開発タスク（Issueなど）に基づき、適切なブランチ戦略（例: `feature/xxx`, `fix/xxx`）に従って新しいブランチを作成します。

2.  **実装とテスト**
    *   開発対象のコードを実装します。
    *   **ドメインロジック (`domainLogics/`) とハンドラー (`handlers/`) については、少なくとも正常系の動作を検証する単体テスト・結合テストを記述します。** 可能であれば、異常系やエッジケースもテストでカバーします。
    *   TDD（テスト駆動開発）のアプローチも推奨されます。
    *   実装とテストを進めながら、適切な粒度でコミットを作成します。コミットメッセージは規約（例: Conventional Commits）に従います。

3.  **最終確認と修正**
    *   一連のコーディング作業が完了したら、**ローカル環境でリンター（`pnpm lint`）とテスト（`pnpm test`）を実行します。**
    *   **エラーや警告が出た場合は、すべて修正します。**

4.  **プルリクエスト作成**
    *   リンターとテストが成功することを確認したら、リモートリポジトリにブランチをプッシュします。
    *   プルリクエスト（PR）を作成し、ルールに従ってタイトルや説明を記述し、レビュアーをアサインします。

## コミットメッセージ規約（例）

コミットメッセージは、変更内容が明確に伝わるように記述します。Conventional Commits のような規約を採用することを推奨します。

例：

```
feat: ユーザー認証機能を追加

ユーザーがメールアドレスとパスワードでログインできるようにする。
セッション管理にはJWTを使用。

fix: プロフィール画像の表示崩れを修正

特定の条件下で画像のアスペクト比が崩れる問題を修正。

refactor: 決済処理ロジックを改善

重複コードを削除し、可読性を向上。
```

## プルリクエスト（PR）のルール

*   PRのタイトルは変更内容を簡潔に示します。
*   PRの説明（Description）には、変更の目的、内容、関連するIssueなどを記載します。
*   **レビュワーに特に確認してほしい点があれば明記します。**
*   **レビュワーが変更内容を確認するための手順（例: APIのエンドポイントとcurlコマンド、画面のURL、操作手順など）を可能な限り記載します。**
*   レビュアーを割り当て、レビューを依頼します。
*   CIチェックがすべて成功していることを確認します。
*   レビューでの指摘事項は修正し、承認を得てからマージします。

### PR作成コマンド例 (gh CLI)

PR作成には `gh pr create` コマンドの使用を推奨します。

特に、PRの説明（Body）が複数行にわたる場合は、以下のいずれかの方法で記述します。

1.  **`echo` とパイプ、`--body-file=-` を使用する:**
    改行を `\\n` で表現し、`echo` コマンドで出力した文字列をパイプで `gh pr create` に渡します。`--body-file=-` は標準入力から本文を読み込むオプションです。

    ```bash
    # 例: タイトル、レビュワー、本文を指定して develop ブランチにPRを作成
    # 本文には改行を含む複数行のテキストを指定
    echo \"### 変更概要\\n\\nユーザー情報更新機能を追加しました。\\n\\n### 確認してほしいこと\\n\\n- バリデーションロジック\\n- APIレスポンス\\n\\n### 確認方法\\n\\n以下のcurlコマンドを実行してください:\\n\`\`\`bash\\ncurl -X PUT ...\\n\`\`\`\" | gh pr create --title \"feat: ユーザー情報更新機能\" --assignee \"@me\" --reviewer \"reviewer1,reviewer2\" --base \"develop\" --body-file=-\n    ```

2.  **本文をファイルに記述し `--body-file <ファイルパス>` を使用する:**
    PRの本文を一時的なテキストファイルに記述し、そのファイルを `--body-file` オプションで指定します。

    ```bash
    # 1. 本文をファイルに記述 (例: pr_body.txt)
    # 2. gh コマンドを実行
    gh pr create --title \"feat: ユーザー情報更新機能\" --assignee \"@me\" --reviewer \"reviewer1,reviewer2\" --base \"develop\" --body-file pr_body.txt
    ```

これらの方法を使うことで、PRの説明を整形しやすくなります。 